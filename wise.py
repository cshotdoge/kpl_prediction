#!/usr/bin/env python#-*- coding:utf-8 -*
# @author: monday 
# @time: 2023/7/14 15:58 
# @desc:

import random
import sys


def pk(x):
    random.seed(x)
    r = random.choice([[103,-3],[-3,103],[102,-2],[-2,102],[101,-1],[-1,101]])
    return r





'''
def pk(dub):
    n1 = 0
    n2 = 0
    while n1 != 3 and n2 != 3:
        ran
        r = ran[dub]
        #print(r)
        if r == '0':
            n1 += 1
        if r == '1':
            n2 += 1
    if n1 == 3:
        return [100+n1-n2, n2-n1]
    if n2 == 3:
        return [n1-n2, 100+n2-n1]
'''


def naova(team_names):
    scores = {}
    for j in range(1, 6):
        for k in range(j + 1, 7):
            score = []
            res = 0
            while True:
                res = input(team_names[j] + ' vs ' + team_names[k])
                if res not in ['30', '03', '31', '13', '32', '23', '']:
                    print('错误，请重新输入！')
                    continue
                if res in ['30', '03', '31', '13', '32', '23']:
                    shit = list(res)
                    if shit[0] == '3':
                        score = [100 + int(shit[0]) - int(shit[1]), int(shit[1]) - int(shit[0])]
                    if shit[1] == '3':
                        score = [int(shit[0]) - int(shit[1]), 100 + int(shit[1]) - int(shit[0])]
                    scores[str(j) + str(k)] = score
                break
    if scores == {}:
        return '测试'
    return scores

def ranking(scores,dub):
    sb = 0
    scsc = {}
    for j in range(1, 6):
        for k in range(j+1, 7):
            if str(j) + str(k) in scores.keys():
                scsc[str(j) + str(k)] = scores[str(j) + str(k)]
            if str(j) + str(k) not in scores.keys():
                sb += 1
                scsc[str(j) + str(k)] = pk(dub*15+sb)
    final = {}
    for i in range(1, 7):
        final[i] = 0
    #print(scores)
    for sc in scsc.items():
        sc_lst = list(sc[0])
        final[int(sc_lst[0])] += sc[1][0]
        final[int(sc_lst[1])] += sc[1][1]
    ranked = sorted(final.items(), key=lambda x: x[1], reverse=True)
    #平分考虑
    finall = []
    mid = {}
    flag = False
    for l in range(0,5):
        if ranked[l] != ranked[l+1]:
            if flag == False:
                finall.append(ranked[l])
            if flag == True:
                flag = False
                mid[ranked[l]] = 0
                for st in scores.items():
                    sc_lst = list(st[0])
                    if int(sc_lst[0]) in mid.keys() and int(sc_lst[1]) in mid.keys():
                        mid[int(sc_lst[0])] += st[1][0]
                        mid[int(sc_lst[1])] += st[1][1]
                midd = sorted(mid.items(), key=lambda x: x[1], reverse=True)
                finall = finall + midd
        if ranked[l] == ranked[l+1]:
            flag = True
            mid[ranked[l][0]] = 0
    finall.append(ranked[5])
    return finall

if __name__ == '__main__':
    scores = {}
    team_names = {}
    team_finals = {}
    while True:
        mode = input('选择模式:1为当前组别，2为自定义组别')
        if mode in '12':
            if mode == '1':
                team_names = {1:'南京hero', 2:'济南rw', 3: 'xyg', 4: '苏州ksg', 5:'长沙tes', 6:'深圳dyg'}
                break
            if mode == '2':
                print('请输入队伍名称，回车结束')
                for i in range(1, 7):
                    team_names[i] = input('队伍' + str(i) + ':')
                break
        if mode not in '12':
            print('虚假')
            continue
    for i in range(1, 7):
        team_finals[i] = {}
        for w in range(1, 7):
            team_finals[i][w] = 0

    print('请输入已知的比赛结果并回车（例如30,03,31,13,32,23，如果还没结果就直接回车)')
    scores = naova(team_names)
    if scores == '测试':
        for v in range(1, 7):
            print(team_names[v])
            for x in range(1, 7):
                print('第' + str(x) + '名的概率:', 1/6)
        sys.exit()

    dub = 0
    wanted = 100000
    print('计算中，请等待')

    while dub < wanted:
        dub += 1
        final_list = []
        final_list = ranking(scores,dub)
        team_finals[final_list[0][0]][1] += 1
        team_finals[final_list[1][0]][2] += 1
        team_finals[final_list[2][0]][3] += 1
        team_finals[final_list[3][0]][4] += 1
        team_finals[final_list[4][0]][5] += 1
        team_finals[final_list[5][0]][6] += 1

    for v in range(1,7):
        print(team_names[v])
        for x in range(1,7):
            print('第'+ str(x) +'名的概率:', team_finals[v][x]/dub)








































